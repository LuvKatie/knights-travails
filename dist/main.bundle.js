(()=>{"use strict";var e={756:(e,t,o)=>{o.d(t,{Z:()=>a});var n=o(537),s=o.n(n),r=o(645),i=o.n(r)()(s());i.push([e.id,"body {\n    height: 100vh;\n    width: 100vw;\n    margin: 0;\n}\n\n","",{version:3,sources:["webpack://./src/styles/main.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,YAAY;IACZ,SAAS;AACb",sourcesContent:["body {\n    height: 100vh;\n    width: 100vw;\n    margin: 0;\n}\n\n"],sourceRoot:""}]);const a=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var o="",n=void 0!==t[5];return t[4]&&(o+="@supports (".concat(t[4],") {")),t[2]&&(o+="@media ".concat(t[2]," {")),n&&(o+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),o+=e(t),n&&(o+="}"),t[2]&&(o+="}"),t[4]&&(o+="}"),o})).join("")},t.i=function(e,o,n,s,r){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(n)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(i[c]=!0)}for(var p=0;p<e.length;p++){var l=[].concat(e[p]);n&&i[l[0]]||(void 0!==r&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=r),o&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=o):l[2]=o),s&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=s):l[4]="".concat(s)),t.push(l))}},t}},537:e=>{e.exports=function(e){var t=e[1],o=e[3];if(!o)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),r="/*# ".concat(s," */");return[t].concat([r]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function o(e){for(var o=-1,n=0;n<t.length;n++)if(t[n].identifier===e){o=n;break}return o}function n(e,n){for(var r={},i=[],a=0;a<e.length;a++){var c=e[a],p=n.base?c[0]+n.base:c[0],l=r[p]||0,u="".concat(p," ").concat(l);r[p]=l+1;var h=o(u),v={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==h)t[h].references++,t[h].updater(v);else{var d=s(v,n);n.byIndex=a,t.splice(a,0,{identifier:u,updater:d,references:1})}i.push(u)}return i}function s(e,t){var o=t.domAPI(t);return o.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;o.update(e=t)}else o.remove()}}e.exports=function(e,s){var r=n(e=e||[],s=s||{});return function(e){e=e||[];for(var i=0;i<r.length;i++){var a=o(r[i]);t[a].references--}for(var c=n(e,s),p=0;p<r.length;p++){var l=o(r[p]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}r=c}}},569:e=>{var t={};e.exports=function(e,o){var n=function(e){if(void 0===t[e]){var o=document.querySelector(e);if(window.HTMLIFrameElement&&o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(e){o=null}t[e]=o}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(o)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,o)=>{e.exports=function(e){var t=o.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(o){!function(e,t,o){var n="";o.supports&&(n+="@supports (".concat(o.supports,") {")),o.media&&(n+="@media ".concat(o.media," {"));var s=void 0!==o.layer;s&&(n+="@layer".concat(o.layer.length>0?" ".concat(o.layer):""," {")),n+=o.css,s&&(n+="}"),o.media&&(n+="}"),o.supports&&(n+="}");var r=o.sourceMap;r&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleTagTransform(n,e,t.options)}(t,e,o)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function o(n){var s=t[n];if(void 0!==s)return s.exports;var r=t[n]={id:n,exports:{}};return e[n](r,r.exports,o),r.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.nc=void 0,(()=>{var e=o(379),t=o.n(e),n=o(795),s=o.n(n),r=o(569),i=o.n(r),a=o(565),c=o.n(a),p=o(216),l=o.n(p),u=o(589),h=o.n(u),v=o(756),d={};d.styleTagTransform=h(),d.setAttributes=c(),d.insert=i().bind(null,"head"),d.domAPI=s(),d.insertStyleElement=l(),t()(v.Z,d),v.Z&&v.Z.locals&&v.Z.locals;class f{constructor(e,t,o,n,s,r,i,a,c,p){this.position=e,this.path=t,this.move0=o,this.move1=n,this.move2=s,this.move3=r,this.move4=i,this.move5=a,this.move6=c,this.move7=p}buildPath(){this.path.push(g.position),this.path.unshift(b.position),this.path=this.path.reverse()}possibleMoves(e){let t=[-1,1],o=[-2,2],n=this.calculateMoves(e,t,o),s=this.calculateMoves(e,o,t);return n.concat(s)}calculateMoves(e,t,o){let n=[];return t.forEach((t=>{for(let s=0;s<2;s++){let r=t+e[0],i=o[s]+e[1];if(!(r>7||i>7||r<0||i<0)){let e=[r,i];n.push(e)}}})),n}appendMoves(e,t,o=0){if(o>=6||o==t)return;let n=this.possibleMoves(e.position);o++;for(let s=0;s<n.length;s++)e[`move${s}`]=new m(n[s],e),null==e[`move${s}`].move0&&this.appendMoves(e[`move${s}`],t,o)}childMoves(e){for(let t=0;t<8;t++){if(void 0===e[`move${t}`])return;this.appendMoves(e[`move${t}`])}}makeTree(e,t,o=-1){if(null!=e){t=this.possibleMoves(e.position).length,null==e.moves0&&this.appendMoves(e);for(let o=0;o<t;o++)this.childMoves(e);return o++,this.makeTree(e=g[`move${o}`],t,o)}}findShortest(e,t,o,n=0,s=[],r=[]){if(n!=o&&(this.possibleMoves(t.position).join(" ").split(" ").includes(e.position[0]+","+e.position[1])&&(s.push(this.checkSteps(e)),s.sort(((e,t)=>e.length-t.length)),this.path=s[0]),n<o)){n++;for(let i=0;i<8;i++){if(void 0===e[`move${i}`])return;this.findShortest(e[`move${i}`],t,o,n,s,r)}}}checkSteps(e,t,o=[]){return null==e.previous||null==e.previous?o:(o.push(e.position),this.checkSteps(e=e.previous,t,o))}}class m{constructor(e,t,o,n,s,r,i,a,c,p){this.position=e,this.previous=t,this.move0=o,this.move1=n,this.move2=s,this.move3=r,this.move4=i,this.move5=a,this.move6=c,this.move7=p}}let g=new f([0,0]),b=new f([7,7]);g.makeTree(g),b.appendMoves(b,1),b.findShortest(g,b,10),b.buildPath(),console.log("Start position: ",g.position),console.log("Target position: ",b.position),console.log("Target's possible moves: ",b.possibleMoves(b.position)),console.log(`You made it in ${b.path.length} moves! Here are the shortest possible paths: `,b.path)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,